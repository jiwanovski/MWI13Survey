/*
* generated by Xtext
*/
package de.nordakademie.mwi13a.team1.survey.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.nordakademie.mwi13a.team1.survey.services.SurveyGrammarAccess;

public class SurveyParser extends AbstractContentAssistParser {
	
	@Inject
	private SurveyGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.nordakademie.mwi13a.team1.survey.ui.contentassist.antlr.internal.InternalSurveyParser createParser() {
		de.nordakademie.mwi13a.team1.survey.ui.contentassist.antlr.internal.InternalSurveyParser result = new de.nordakademie.mwi13a.team1.survey.ui.contentassist.antlr.internal.InternalSurveyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getIdentifierAccess().getAlternatives(), "rule__Identifier__Alternatives");
					put(grammarAccess.getMandatoryAccess().getAlternatives(), "rule__Mandatory__Alternatives");
					put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
					put(grammarAccess.getQuestionnaireAccess().getGroup(), "rule__Questionnaire__Group__0");
					put(grammarAccess.getPartAccess().getGroup(), "rule__Part__Group__0");
					put(grammarAccess.getQuestionAccess().getGroup(), "rule__Question__Group__0");
					put(grammarAccess.getAnswerAccess().getGroup(), "rule__Answer__Group__0");
					put(grammarAccess.getTextLnAccess().getGroup(), "rule__TextLn__Group__0");
					put(grammarAccess.getTextBlAccess().getGroup(), "rule__TextBl__Group__0");
					put(grammarAccess.getMatrixAccess().getGroup(), "rule__Matrix__Group__0");
					put(grammarAccess.getMatrixAccess().getGroup_5(), "rule__Matrix__Group_5__0");
					put(grammarAccess.getMatrixAccess().getGroup_10(), "rule__Matrix__Group_10__0");
					put(grammarAccess.getSurveyAccess().getQuestionnaireAssignment(), "rule__Survey__QuestionnaireAssignment");
					put(grammarAccess.getQuestionnaireAccess().getNameAssignment_1(), "rule__Questionnaire__NameAssignment_1");
					put(grammarAccess.getQuestionnaireAccess().getIdAssignment_4(), "rule__Questionnaire__IdAssignment_4");
					put(grammarAccess.getQuestionnaireAccess().getPartAssignment_5(), "rule__Questionnaire__PartAssignment_5");
					put(grammarAccess.getPartAccess().getNameAssignment_1(), "rule__Part__NameAssignment_1");
					put(grammarAccess.getPartAccess().getIdAssignment_4(), "rule__Part__IdAssignment_4");
					put(grammarAccess.getPartAccess().getQuestionAssignment_5(), "rule__Part__QuestionAssignment_5");
					put(grammarAccess.getQuestionAccess().getNameAssignment_1(), "rule__Question__NameAssignment_1");
					put(grammarAccess.getQuestionAccess().getIdAssignment_4(), "rule__Question__IdAssignment_4");
					put(grammarAccess.getQuestionAccess().getMandatoryAssignment_6(), "rule__Question__MandatoryAssignment_6");
					put(grammarAccess.getQuestionAccess().getTypeAssignment_8(), "rule__Question__TypeAssignment_8");
					put(grammarAccess.getQuestionAccess().getAnswerAssignment_9(), "rule__Question__AnswerAssignment_9");
					put(grammarAccess.getAnswerAccess().getIdAssignment_1(), "rule__Answer__IdAssignment_1");
					put(grammarAccess.getAnswerAccess().getNameAssignment_3(), "rule__Answer__NameAssignment_3");
					put(grammarAccess.getTextLnAccess().getLengthAssignment_2(), "rule__TextLn__LengthAssignment_2");
					put(grammarAccess.getTextBlAccess().getLengthAssignment_2(), "rule__TextBl__LengthAssignment_2");
					put(grammarAccess.getMatrixAccess().getAnswerAssignment_9(), "rule__Matrix__AnswerAssignment_9");
					put(grammarAccess.getMatrixAccess().getAnswerAssignment_10_1(), "rule__Matrix__AnswerAssignment_10_1");
					put(grammarAccess.getComboBoxAccess().getNameAssignment(), "rule__ComboBox__NameAssignment");
					put(grammarAccess.getDropDownAccess().getNameAssignment(), "rule__DropDown__NameAssignment");
					put(grammarAccess.getRadioAccess().getNameAssignment(), "rule__Radio__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.nordakademie.mwi13a.team1.survey.ui.contentassist.antlr.internal.InternalSurveyParser typedParser = (de.nordakademie.mwi13a.team1.survey.ui.contentassist.antlr.internal.InternalSurveyParser) parser;
			typedParser.entryRuleSurvey();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SurveyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SurveyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
