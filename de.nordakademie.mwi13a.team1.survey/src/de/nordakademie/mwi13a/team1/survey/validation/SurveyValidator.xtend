/*
 * generated by Xtext
 */
package de.nordakademie.mwi13a.team1.survey.validation

import de.nordakademie.mwi13a.team1.survey.survey.DropDown
import de.nordakademie.mwi13a.team1.survey.survey.Part
import de.nordakademie.mwi13a.team1.survey.survey.Question
import de.nordakademie.mwi13a.team1.survey.survey.Questionnaire
import de.nordakademie.mwi13a.team1.survey.survey.Survey
import de.nordakademie.mwi13a.team1.survey.survey.SurveyPackage
import java.util.ArrayList
import org.eclipse.xtext.validation.Check
import org.eclipse.xtext.validation.CheckType

//import de.nordakademie.mwi13a.team1.survey.survey.Question
//import de.nordakademie.mwi13a.team1.survey.survey.DropDown

class SurveyValidator extends AbstractSurveyValidator {

	@Check(CheckType.FAST)
	def SurveyContainsQuestionnaire (Survey survey) {
		if(survey.questionnaire.empty) 
			warning("A Survey must at contain at least 1 Questionnaire!", 
				SurveyPackage.Literals.SURVEY__QUESTIONNAIRE
			)
	}
	
	@Check(CheckType.FAST)
	def QuestionnaireContainsPart (Questionnaire questionnaire) {
		if(questionnaire.part.empty) 
			warning("A Questionnaire must contain at least 1 Part!", 
				SurveyPackage.Literals.QUESTIONNAIRE__NAME
			)              
	}
	
	@Check(CheckType.FAST)
	def PartContainsQuestion (Part part) {
		if(part.question.empty) 
			warning("A Part must contain at least 1 Question!", 
				SurveyPackage.Literals.PART__NAME
			)
	}
			
	@Check(CheckType.FAST)
	def IDQuestionnaire (Questionnaire questionnaire) {
//		var listeFragebogen = new ArrayList()[survey.questionnaire]
//		for(id : survey.questionnaire.id)
//		val duplicate = survey.questionnaire.findFirst[]
//		if (duplicate != null)
//			error("Doppelte ID in Umfrage", MyDSLPackage.Literals.FRAGEBOGEN__NAME)
//		
		
		val survey = (questionnaire.eContainer as Survey)		
		if (!survey.questionnaire.empty){
			//val numberquestionnaires = survey.questionnaire.length
			val IDquestionnaire = (survey.questionnaire as Questionnaire).id
			survey.questionnaire.forEach[
				if (it.id.equals(IDquestionnaire)){
					error("Duplicate ID in Questionnaires" + it.name + "and", SurveyPackage.Literals.QUESTIONNAIRE__NAME)
				}
			]
				//val IDcurrent = (survey.questionnaire as Questionnaire).id
				
		
		}
//		if (survey.questionnaire.exists[it == survey.questionnaire && it.id == survey.questionnaire.id])
//			error("Doppelte ID in Fragebogen", SurveyPackage.Literals.QUESTIONNAIRE__NAME)
	}
		
		
	@Check
	def DropboxWith2Answers (DropDown dropdown) {
		//if (frage.dropdown != null)
		
		//if (surveyterminaltypes.name == 'DropDown'){
		//	val countanswers = (dropdown.eContainer as Answer)
		//if(surveyterminaltypes == typeof(DropDown)){
			if (dropdown.answer.size <= 2){
				error("A DropDown must contain at least 2 Answers!", 
				SurveyPackage.Literals.QUESTIONNAIRE__NAME)
			}
		}
	}
	
//	@Check(CheckType.FAST)
//	def DropboxWith2Answers (Question question) {
//		if(question.questionType == 'DropDown'){
//			val dropDown = DropDown
//			if (dropDown.answer.size <= 2){
//				error("A DropDown must contain at least 2 Answers!", 
//				SurveyPackage.Literals.QUESTION__NAME)
//			}
//		}
//	}
//}
