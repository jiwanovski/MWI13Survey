/*
* generated by Xtext
*/
package de.nordakademie.mwi13a.team1.survey.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SurveyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Survey");
		private final Assignment cQuestionnaireAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cQuestionnaireQuestionnaireParserRuleCall_0 = (RuleCall)cQuestionnaireAssignment.eContents().get(0);
		
		/// *Root element Survey* / Survey:
		//	questionnaire+=Questionnaire+;
		public ParserRule getRule() { return rule; }

		//questionnaire+=Questionnaire+
		public Assignment getQuestionnaireAssignment() { return cQuestionnaireAssignment; }

		//Questionnaire
		public RuleCall getQuestionnaireQuestionnaireParserRuleCall_0() { return cQuestionnaireQuestionnaireParserRuleCall_0; }
	}

	public class QuestionnaireElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Questionnaire");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionnaireKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIdentifierParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cPartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPartPartParserRuleCall_5_0 = (RuleCall)cPartAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// *A Questionnaire must contain at least 1 Part* / Questionnaire:
		//	"Questionnaire:" name=STRING "{" "ID:" id=Identifier part+=Part+ "}";
		public ParserRule getRule() { return rule; }

		//"Questionnaire:" name=STRING "{" "ID:" id=Identifier part+=Part+ "}"
		public Group getGroup() { return cGroup; }

		//"Questionnaire:"
		public Keyword getQuestionnaireKeyword_0() { return cQuestionnaireKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"ID:"
		public Keyword getIDKeyword_3() { return cIDKeyword_3; }

		//id=Identifier
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_4_0() { return cIdIdentifierParserRuleCall_4_0; }

		//part+=Part+
		public Assignment getPartAssignment_5() { return cPartAssignment_5; }

		//Part
		public RuleCall getPartPartParserRuleCall_5_0() { return cPartPartParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Part");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIdentifierParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Assignment cQuestionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cQuestionQuestionParserRuleCall_5_0 = (RuleCall)cQuestionAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// *A Part must contain at least 1 Question* / Part:
		//	"Part:" name=STRING "{" "ID:" id=Identifier question+=Question+ "}";
		public ParserRule getRule() { return rule; }

		//"Part:" name=STRING "{" "ID:" id=Identifier question+=Question+ "}"
		public Group getGroup() { return cGroup; }

		//"Part:"
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"ID:"
		public Keyword getIDKeyword_3() { return cIDKeyword_3; }

		//id=Identifier
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_4_0() { return cIdIdentifierParserRuleCall_4_0; }

		//question+=Question+
		public Assignment getQuestionAssignment_5() { return cQuestionAssignment_5; }

		//Question
		public RuleCall getQuestionQuestionParserRuleCall_5_0() { return cQuestionQuestionParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class QuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Question");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cIDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIdAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIdIdentifierParserRuleCall_4_0 = (RuleCall)cIdAssignment_4.eContents().get(0);
		private final Keyword cMandatoryKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMandatoryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMandatoryMandatoryParserRuleCall_6_0 = (RuleCall)cMandatoryAssignment_6.eContents().get(0);
		private final Keyword cTypeKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTypeAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTypeTypeParserRuleCall_8_0 = (RuleCall)cTypeAssignment_8.eContents().get(0);
		private final Assignment cAnswerAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnswerAnswerParserRuleCall_9_0 = (RuleCall)cAnswerAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		/// *For each Question will be defined a type and wether it's a mandatory field or not* / Question:
		//	"Question:" name=STRING "{" "ID:" id=Identifier "Mandatory:" mandatory=Mandatory "Type:" type= //(dropdown+=DropDown | combobox=ComboBoxT | radio+=Radio | matrix+=Matrix | textln+=TextLn | textbl+=TextBl)
		//	Type / *For each Question can be defined an arbitraty number of Answers. 
		//		 *The Question Types TextLn and TextBl don't require any answers because there's an STRING expected by default.* / answer+=Answer*
		//	"}";
		public ParserRule getRule() { return rule; }

		//"Question:" name=STRING "{" "ID:" id=Identifier "Mandatory:" mandatory=Mandatory "Type:" type= //(dropdown+=DropDown | combobox=ComboBoxT | radio+=Radio | matrix+=Matrix | textln+=TextLn | textbl+=TextBl)
		//Type / *For each Question can be defined an arbitraty number of Answers. 
		//		 *The Question Types TextLn and TextBl don't require any answers because there's an STRING expected by default.* / answer+=Answer*
		//"}"
		public Group getGroup() { return cGroup; }

		//"Question:"
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"ID:"
		public Keyword getIDKeyword_3() { return cIDKeyword_3; }

		//id=Identifier
		public Assignment getIdAssignment_4() { return cIdAssignment_4; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_4_0() { return cIdIdentifierParserRuleCall_4_0; }

		//"Mandatory:"
		public Keyword getMandatoryKeyword_5() { return cMandatoryKeyword_5; }

		//mandatory=Mandatory
		public Assignment getMandatoryAssignment_6() { return cMandatoryAssignment_6; }

		//Mandatory
		public RuleCall getMandatoryMandatoryParserRuleCall_6_0() { return cMandatoryMandatoryParserRuleCall_6_0; }

		//"Type:"
		public Keyword getTypeKeyword_7() { return cTypeKeyword_7; }

		//type= //(dropdown+=DropDown | combobox=ComboBoxT | radio+=Radio | matrix+=Matrix | textln+=TextLn | textbl+=TextBl)
		//Type
		public Assignment getTypeAssignment_8() { return cTypeAssignment_8; }

		////(dropdown+=DropDown | combobox=ComboBoxT | radio+=Radio | matrix+=Matrix | textln+=TextLn | textbl+=TextBl)
		//Type
		public RuleCall getTypeTypeParserRuleCall_8_0() { return cTypeTypeParserRuleCall_8_0; }

		//answer+=Answer*
		public Assignment getAnswerAssignment_9() { return cAnswerAssignment_9; }

		//Answer
		public RuleCall getAnswerAnswerParserRuleCall_9_0() { return cAnswerAnswerParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class AnswerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Answer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIdentifierParserRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cAnswerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIdentifierParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//Answer:
		//	"ID:" id=Identifier "Answer:" name=Identifier;
		public ParserRule getRule() { return rule; }

		//"ID:" id=Identifier "Answer:" name=Identifier
		public Group getGroup() { return cGroup; }

		//"ID:"
		public Keyword getIDKeyword_0() { return cIDKeyword_0; }

		//id=Identifier
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//Identifier
		public RuleCall getIdIdentifierParserRuleCall_1_0() { return cIdIdentifierParserRuleCall_1_0; }

		//"Answer:"
		public Keyword getAnswerKeyword_2() { return cAnswerKeyword_2; }

		//name=Identifier
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//Identifier
		public RuleCall getNameIdentifierParserRuleCall_3_0() { return cNameIdentifierParserRuleCall_3_0; }
	}

	public class TextLnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextLn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextLnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// *Following Question Types are available:
		// *TextLn (Textline) and TextBl (Textblock) require the indication of the maximal length of text input in brackets.* / TextLn:
		//	"TextLn" "(" length=INT ")";
		public ParserRule getRule() { return rule; }

		//"TextLn" "(" length=INT ")"
		public Group getGroup() { return cGroup; }

		//"TextLn"
		public Keyword getTextLnKeyword_0() { return cTextLnKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class TextBlElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TextBl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextBlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TextBl:
		//	"TextBl" "(" length=INT ")";
		public ParserRule getRule() { return rule; }

		//"TextBl" "(" length=INT ")"
		public Group getGroup() { return cGroup; }

		//"TextBl"
		public Keyword getTextBlKeyword_0() { return cTextBlKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }

		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class MatrixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Matrix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMatrixKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cScaleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cIdentifierParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVerticalLineKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cIdentifierParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cQuestionsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnswerAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnswerAnswerParserRuleCall_9_0 = (RuleCall)cAnswerAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cVerticalLineKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cAnswerAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cAnswerAnswerParserRuleCall_10_1_0 = (RuleCall)cAnswerAssignment_10_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cRightParenthesisKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		/// *Question Matrix* / Matrix:
		//	"Matrix" "(" "Scale:" "(" Identifier ("|" Identifier)* ")" "Questions:" "(" answer+=Answer ("|" answer+=Answer)* ")"
		//	")";
		public ParserRule getRule() { return rule; }

		//"Matrix" "(" "Scale:" "(" Identifier ("|" Identifier)* ")" "Questions:" "(" answer+=Answer ("|" answer+=Answer)* ")" ")"
		public Group getGroup() { return cGroup; }

		//"Matrix"
		public Keyword getMatrixKeyword_0() { return cMatrixKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//"Scale:"
		public Keyword getScaleKeyword_2() { return cScaleKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_4() { return cIdentifierParserRuleCall_4; }

		//("|" Identifier)*
		public Group getGroup_5() { return cGroup_5; }

		//"|"
		public Keyword getVerticalLineKeyword_5_0() { return cVerticalLineKeyword_5_0; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_5_1() { return cIdentifierParserRuleCall_5_1; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//"Questions:"
		public Keyword getQuestionsKeyword_7() { return cQuestionsKeyword_7; }

		//"("
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }

		//answer+=Answer
		public Assignment getAnswerAssignment_9() { return cAnswerAssignment_9; }

		//Answer
		public RuleCall getAnswerAnswerParserRuleCall_9_0() { return cAnswerAnswerParserRuleCall_9_0; }

		//("|" answer+=Answer)*
		public Group getGroup_10() { return cGroup_10; }

		//"|"
		public Keyword getVerticalLineKeyword_10_0() { return cVerticalLineKeyword_10_0; }

		//answer+=Answer
		public Assignment getAnswerAssignment_10_1() { return cAnswerAssignment_10_1; }

		//Answer
		public RuleCall getAnswerAnswerParserRuleCall_10_1_0() { return cAnswerAnswerParserRuleCall_10_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }

		//")"
		public Keyword getRightParenthesisKeyword_12() { return cRightParenthesisKeyword_12; }
	}

	public class ComboBoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ComboBox");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameComboBoxKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		/// *Multiple Choice Question* / ComboBox:
		//	name="ComboBox";
		public ParserRule getRule() { return rule; }

		//name="ComboBox"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"ComboBox"
		public Keyword getNameComboBoxKeyword_0() { return cNameComboBoxKeyword_0; }
	}

	public class DropDownElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DropDown");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameDropDownKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		/// *Single Choice Question* / DropDown:
		//	name="DropDown";
		public ParserRule getRule() { return rule; }

		//name="DropDown"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"DropDown"
		public Keyword getNameDropDownKeyword_0() { return cNameDropDownKeyword_0; }
	}

	public class RadioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Radio");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cNameRadioKeyword_0 = (Keyword)cNameAssignment.eContents().get(0);
		
		//Radio:
		//	name="Radio";
		public ParserRule getRule() { return rule; }

		//name="Radio"
		public Assignment getNameAssignment() { return cNameAssignment; }

		//"Radio"
		public Keyword getNameRadioKeyword_0() { return cNameRadioKeyword_0; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Identifier:
		//	ID | STRING | INT;
		public ParserRule getRule() { return rule; }

		//ID | STRING | INT
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class MandatoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mandatory");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cYesKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cNoKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Mandatory:
		//	"Yes" | "No";
		public ParserRule getRule() { return rule; }

		//"Yes" | "No"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"Yes"
		public Keyword getYesKeyword_0() { return cYesKeyword_0; }

		//"No"
		public Keyword getNoKeyword_1() { return cNoKeyword_1; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTextLnParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cComboBoxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDropDownParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTextBlParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMatrixParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRadioParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Type:
		//	TextLn | ComboBox | DropDown | TextBl | Matrix | Radio;
		public ParserRule getRule() { return rule; }

		//TextLn | ComboBox | DropDown | TextBl | Matrix | Radio
		public Alternatives getAlternatives() { return cAlternatives; }

		//TextLn
		public RuleCall getTextLnParserRuleCall_0() { return cTextLnParserRuleCall_0; }

		//ComboBox
		public RuleCall getComboBoxParserRuleCall_1() { return cComboBoxParserRuleCall_1; }

		//DropDown
		public RuleCall getDropDownParserRuleCall_2() { return cDropDownParserRuleCall_2; }

		//TextBl
		public RuleCall getTextBlParserRuleCall_3() { return cTextBlParserRuleCall_3; }

		//Matrix
		public RuleCall getMatrixParserRuleCall_4() { return cMatrixParserRuleCall_4; }

		//Radio
		public RuleCall getRadioParserRuleCall_5() { return cRadioParserRuleCall_5; }
	}
	
	
	private SurveyElements pSurvey;
	private QuestionnaireElements pQuestionnaire;
	private PartElements pPart;
	private QuestionElements pQuestion;
	private AnswerElements pAnswer;
	private TextLnElements pTextLn;
	private TextBlElements pTextBl;
	private MatrixElements pMatrix;
	private ComboBoxElements pComboBox;
	private DropDownElements pDropDown;
	private RadioElements pRadio;
	private IdentifierElements pIdentifier;
	private MandatoryElements pMandatory;
	private TypeElements pType;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SurveyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.nordakademie.mwi13a.team1.survey.Survey".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *Root element Survey* / Survey:
	//	questionnaire+=Questionnaire+;
	public SurveyElements getSurveyAccess() {
		return (pSurvey != null) ? pSurvey : (pSurvey = new SurveyElements());
	}
	
	public ParserRule getSurveyRule() {
		return getSurveyAccess().getRule();
	}

	/// *A Questionnaire must contain at least 1 Part* / Questionnaire:
	//	"Questionnaire:" name=STRING "{" "ID:" id=Identifier part+=Part+ "}";
	public QuestionnaireElements getQuestionnaireAccess() {
		return (pQuestionnaire != null) ? pQuestionnaire : (pQuestionnaire = new QuestionnaireElements());
	}
	
	public ParserRule getQuestionnaireRule() {
		return getQuestionnaireAccess().getRule();
	}

	/// *A Part must contain at least 1 Question* / Part:
	//	"Part:" name=STRING "{" "ID:" id=Identifier question+=Question+ "}";
	public PartElements getPartAccess() {
		return (pPart != null) ? pPart : (pPart = new PartElements());
	}
	
	public ParserRule getPartRule() {
		return getPartAccess().getRule();
	}

	/// *For each Question will be defined a type and wether it's a mandatory field or not* / Question:
	//	"Question:" name=STRING "{" "ID:" id=Identifier "Mandatory:" mandatory=Mandatory "Type:" type= //(dropdown+=DropDown | combobox=ComboBoxT | radio+=Radio | matrix+=Matrix | textln+=TextLn | textbl+=TextBl)
	//	Type / *For each Question can be defined an arbitraty number of Answers. 
	//		 *The Question Types TextLn and TextBl don't require any answers because there's an STRING expected by default.* / answer+=Answer*
	//	"}";
	public QuestionElements getQuestionAccess() {
		return (pQuestion != null) ? pQuestion : (pQuestion = new QuestionElements());
	}
	
	public ParserRule getQuestionRule() {
		return getQuestionAccess().getRule();
	}

	//Answer:
	//	"ID:" id=Identifier "Answer:" name=Identifier;
	public AnswerElements getAnswerAccess() {
		return (pAnswer != null) ? pAnswer : (pAnswer = new AnswerElements());
	}
	
	public ParserRule getAnswerRule() {
		return getAnswerAccess().getRule();
	}

	/// *Following Question Types are available:
	// *TextLn (Textline) and TextBl (Textblock) require the indication of the maximal length of text input in brackets.* / TextLn:
	//	"TextLn" "(" length=INT ")";
	public TextLnElements getTextLnAccess() {
		return (pTextLn != null) ? pTextLn : (pTextLn = new TextLnElements());
	}
	
	public ParserRule getTextLnRule() {
		return getTextLnAccess().getRule();
	}

	//TextBl:
	//	"TextBl" "(" length=INT ")";
	public TextBlElements getTextBlAccess() {
		return (pTextBl != null) ? pTextBl : (pTextBl = new TextBlElements());
	}
	
	public ParserRule getTextBlRule() {
		return getTextBlAccess().getRule();
	}

	/// *Question Matrix* / Matrix:
	//	"Matrix" "(" "Scale:" "(" Identifier ("|" Identifier)* ")" "Questions:" "(" answer+=Answer ("|" answer+=Answer)* ")"
	//	")";
	public MatrixElements getMatrixAccess() {
		return (pMatrix != null) ? pMatrix : (pMatrix = new MatrixElements());
	}
	
	public ParserRule getMatrixRule() {
		return getMatrixAccess().getRule();
	}

	/// *Multiple Choice Question* / ComboBox:
	//	name="ComboBox";
	public ComboBoxElements getComboBoxAccess() {
		return (pComboBox != null) ? pComboBox : (pComboBox = new ComboBoxElements());
	}
	
	public ParserRule getComboBoxRule() {
		return getComboBoxAccess().getRule();
	}

	/// *Single Choice Question* / DropDown:
	//	name="DropDown";
	public DropDownElements getDropDownAccess() {
		return (pDropDown != null) ? pDropDown : (pDropDown = new DropDownElements());
	}
	
	public ParserRule getDropDownRule() {
		return getDropDownAccess().getRule();
	}

	//Radio:
	//	name="Radio";
	public RadioElements getRadioAccess() {
		return (pRadio != null) ? pRadio : (pRadio = new RadioElements());
	}
	
	public ParserRule getRadioRule() {
		return getRadioAccess().getRule();
	}

	//Identifier:
	//	ID | STRING | INT;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Mandatory:
	//	"Yes" | "No";
	public MandatoryElements getMandatoryAccess() {
		return (pMandatory != null) ? pMandatory : (pMandatory = new MandatoryElements());
	}
	
	public ParserRule getMandatoryRule() {
		return getMandatoryAccess().getRule();
	}

	//Type:
	//	TextLn | ComboBox | DropDown | TextBl | Matrix | Radio;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
