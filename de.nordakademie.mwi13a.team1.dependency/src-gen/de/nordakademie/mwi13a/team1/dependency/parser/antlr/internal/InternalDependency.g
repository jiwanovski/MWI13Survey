/*
* generated by Xtext
*/
grammar InternalDependency;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package de.nordakademie.mwi13a.team1.dependency.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.nordakademie.mwi13a.team1.dependency.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.nordakademie.mwi13a.team1.dependency.services.DependencyGrammarAccess;

}

@parser::members {

 	private DependencyGrammarAccess grammarAccess;
 	
    public InternalDependencyParser(TokenStream input, DependencyGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SurveyDependencies";	
   	}
   	
   	@Override
   	protected DependencyGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSurveyDependencies
entryRuleSurveyDependencies returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyDependenciesRule()); }
	 iv_ruleSurveyDependencies=ruleSurveyDependencies 
	 { $current=$iv_ruleSurveyDependencies.current; } 
	 EOF 
;

// Rule SurveyDependencies
ruleSurveyDependencies returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyDependenciesAccess().getSurveyDependencySurveyDependencyParserRuleCall_0()); 
	    }
		lv_surveyDependency_0_0=ruleSurveyDependency		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyDependenciesRule());
	        }
       		add(
       			$current, 
       			"surveyDependency",
        		lv_surveyDependency_0_0, 
        		"SurveyDependency");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;







// Entry rule entryRuleSurveyDependency
entryRuleSurveyDependency returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSurveyDependencyRule()); }
	 iv_ruleSurveyDependency=ruleSurveyDependency 
	 { $current=$iv_ruleSurveyDependency.current; } 
	 EOF 
;

// Rule SurveyDependency
ruleSurveyDependency returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Survey:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSurveyDependencyAccess().getSurveyKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSurveyDependencyRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getSurveyDependencyAccess().getSurveyQuestionnaireCrossReference_1_0()); 
	}

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSurveyDependencyAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSurveyDependencyAccess().getPartSDPartParserRuleCall_3_0()); 
	    }
		lv_part_3_0=ruleSDPart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSurveyDependencyRule());
	        }
       		add(
       			$current, 
       			"part",
        		lv_part_3_0, 
        		"SDPart");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSurveyDependencyAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSDPart
entryRuleSDPart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDPartRule()); }
	 iv_ruleSDPart=ruleSDPart 
	 { $current=$iv_ruleSDPart.current; } 
	 EOF 
;

// Rule SDPart
ruleSDPart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Part:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSDPartAccess().getPartKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDPartRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getSDPartAccess().getPart2PartCrossReference_1_0()); 
	}

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSDPartAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='Next part (default):' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSDPartAccess().getNextPartDefaultKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDPartRule());
	        }
        }
	otherlv_4=RULE_STRING
	{
		newLeafNode(otherlv_4, grammarAccess.getSDPartAccess().getDefaultNextPartPartCrossReference_4_0()); 
	}

)
)(	otherlv_5='Next parts {' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSDPartAccess().getNextPartsKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSDPartAccess().getNextPartsSDNextPartsParserRuleCall_5_1_0()); 
	    }
		lv_nextParts_6_0=ruleSDNextParts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDPartRule());
	        }
       		add(
       			$current, 
       			"nextParts",
        		lv_nextParts_6_0, 
        		"SDNextParts");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSDPartAccess().getRightCurlyBracketKeyword_5_2());
    }
)?	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSDPartAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleSDNextParts
entryRuleSDNextParts returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDNextPartsRule()); }
	 iv_ruleSDNextParts=ruleSDNextParts 
	 { $current=$iv_ruleSDNextParts.current; } 
	 EOF 
;

// Rule SDNextParts
ruleSDNextParts returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Next part:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSDNextPartsAccess().getNextPartKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDNextPartsRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getSDNextPartsAccess().getNextPartPartCrossReference_1_0()); 
	}

)
)	otherlv_2='Part dependencies {' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSDNextPartsAccess().getPartDependenciesKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSDNextPartsAccess().getPartDependenciesSDPartDependenciesParserRuleCall_3_0()); 
	    }
		lv_partDependencies_3_0=ruleSDPartDependencies		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDNextPartsRule());
	        }
       		add(
       			$current, 
       			"partDependencies",
        		lv_partDependencies_3_0, 
        		"SDPartDependencies");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_4='AND' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSDNextPartsAccess().getANDKeyword_4_0_0());
    }

    |	otherlv_5='OR' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSDNextPartsAccess().getORKeyword_4_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSDNextPartsAccess().getPartDependenciesSDPartDependenciesParserRuleCall_4_1_0()); 
	    }
		lv_partDependencies_6_0=ruleSDPartDependencies		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSDNextPartsRule());
	        }
       		add(
       			$current, 
       			"partDependencies",
        		lv_partDependencies_6_0, 
        		"SDPartDependencies");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSDNextPartsAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleSDPartDependencies
entryRuleSDPartDependencies returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSDPartDependenciesRule()); }
	 iv_ruleSDPartDependencies=ruleSDPartDependencies 
	 { $current=$iv_ruleSDPartDependencies.current; } 
	 EOF 
;

// Rule SDPartDependencies
ruleSDPartDependencies returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Question:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSDPartDependenciesAccess().getQuestionKeyword_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDPartDependenciesRule());
	        }
        }
	otherlv_1=RULE_STRING
	{
		newLeafNode(otherlv_1, grammarAccess.getSDPartDependenciesAccess().getQuestionQuestionCrossReference_1_0()); 
	}

)
)	otherlv_2='Answer:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSDPartDependenciesAccess().getAnswerKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSDPartDependenciesRule());
	        }
        }
	otherlv_3=RULE_STRING
	{
		newLeafNode(otherlv_3, grammarAccess.getSDPartDependenciesAccess().getAnswerAnswerCrossReference_3_0()); 
	}

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


