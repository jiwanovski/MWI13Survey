/*
* generated by Xtext
*/
package de.nordakademie.mwi13a.team1.dependency.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DependencyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DependencyModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DependencyModel");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsSurveyElementsParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//DependencyModel:
		//	elements+=SurveyElements+;
		public ParserRule getRule() { return rule; }

		//elements+=SurveyElements+
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//SurveyElements
		public RuleCall getElementsSurveyElementsParserRuleCall_0() { return cElementsSurveyElementsParserRuleCall_0; }
	}

	public class SurveyElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SurveyElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameQuestionnaireCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameQuestionnaireSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNameQuestionnaireCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartElementsPartElementsParserRuleCall_3_0 = (RuleCall)cPartElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SurveyElements:
		//	"Survey:" name=[surveyImp::Questionnaire|STRING] "{" partElements+=PartElements+ "}";
		public ParserRule getRule() { return rule; }

		//"Survey:" name=[surveyImp::Questionnaire|STRING] "{" partElements+=PartElements+ "}"
		public Group getGroup() { return cGroup; }

		//"Survey:"
		public Keyword getSurveyKeyword_0() { return cSurveyKeyword_0; }

		//name=[surveyImp::Questionnaire|STRING]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[surveyImp::Questionnaire|STRING]
		public CrossReference getNameQuestionnaireCrossReference_1_0() { return cNameQuestionnaireCrossReference_1_0; }

		//STRING
		public RuleCall getNameQuestionnaireSTRINGTerminalRuleCall_1_0_1() { return cNameQuestionnaireSTRINGTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//partElements+=PartElements+
		public Assignment getPartElementsAssignment_3() { return cPartElementsAssignment_3; }

		//PartElements
		public RuleCall getPartElementsPartElementsParserRuleCall_3_0() { return cPartElementsPartElementsParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class PartElementsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PartElements");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamePartCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNamePartSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNamePartCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cNextPartsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Assignment cNextPartsAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final RuleCall cNextPartsDMNextPartsParserRuleCall_2_1_0_0 = (RuleCall)cNextPartsAssignment_2_1_0.eContents().get(0);
		private final Group cGroup_2_1_1 = (Group)cGroup_2_1.eContents().get(1);
		private final Keyword cORKeyword_2_1_1_0 = (Keyword)cGroup_2_1_1.eContents().get(0);
		private final Assignment cNextPartsAssignment_2_1_1_1 = (Assignment)cGroup_2_1_1.eContents().get(1);
		private final RuleCall cNextPartsDMNextPartsParserRuleCall_2_1_1_1_0 = (RuleCall)cNextPartsAssignment_2_1_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PartElements:
		//	"Part:" name=[surveyImp::Part|STRING] ("Next parts {" (nextParts+=DMNextParts ("OR" nextParts+=DMNextParts)*) "}")+;
		public ParserRule getRule() { return rule; }

		//"Part:" name=[surveyImp::Part|STRING] ("Next parts {" (nextParts+=DMNextParts ("OR" nextParts+=DMNextParts)*) "}")+
		public Group getGroup() { return cGroup; }

		//"Part:"
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }

		//name=[surveyImp::Part|STRING]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[surveyImp::Part|STRING]
		public CrossReference getNamePartCrossReference_1_0() { return cNamePartCrossReference_1_0; }

		//STRING
		public RuleCall getNamePartSTRINGTerminalRuleCall_1_0_1() { return cNamePartSTRINGTerminalRuleCall_1_0_1; }

		//("Next parts {" (nextParts+=DMNextParts ("OR" nextParts+=DMNextParts)*) "}")+
		public Group getGroup_2() { return cGroup_2; }

		//"Next parts {"
		public Keyword getNextPartsKeyword_2_0() { return cNextPartsKeyword_2_0; }

		//nextParts+=DMNextParts ("OR" nextParts+=DMNextParts)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//nextParts+=DMNextParts
		public Assignment getNextPartsAssignment_2_1_0() { return cNextPartsAssignment_2_1_0; }

		//DMNextParts
		public RuleCall getNextPartsDMNextPartsParserRuleCall_2_1_0_0() { return cNextPartsDMNextPartsParserRuleCall_2_1_0_0; }

		//("OR" nextParts+=DMNextParts)*
		public Group getGroup_2_1_1() { return cGroup_2_1_1; }

		//"OR"
		public Keyword getORKeyword_2_1_1_0() { return cORKeyword_2_1_1_0; }

		//nextParts+=DMNextParts
		public Assignment getNextPartsAssignment_2_1_1_1() { return cNextPartsAssignment_2_1_1_1; }

		//DMNextParts
		public RuleCall getNextPartsDMNextPartsParserRuleCall_2_1_1_1_0() { return cNextPartsDMNextPartsParserRuleCall_2_1_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class DMNextPartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DMNextParts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNamePartCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNamePartSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNamePartCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPartDependenciesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cExpressionsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cExpressionsDependencyParserRuleCall_2_2_0 = (RuleCall)cExpressionsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//DMNextParts:
		//	"Next part:" name=[surveyImp::Part|STRING] ("Part dependencies" "{" expressions+=Dependency+ "}")?;
		public ParserRule getRule() { return rule; }

		//"Next part:" name=[surveyImp::Part|STRING] ("Part dependencies" "{" expressions+=Dependency+ "}")?
		public Group getGroup() { return cGroup; }

		//"Next part:"
		public Keyword getNextPartKeyword_0() { return cNextPartKeyword_0; }

		//name=[surveyImp::Part|STRING]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//[surveyImp::Part|STRING]
		public CrossReference getNamePartCrossReference_1_0() { return cNamePartCrossReference_1_0; }

		//STRING
		public RuleCall getNamePartSTRINGTerminalRuleCall_1_0_1() { return cNamePartSTRINGTerminalRuleCall_1_0_1; }

		//("Part dependencies" "{" expressions+=Dependency+ "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"Part dependencies"
		public Keyword getPartDependenciesKeyword_2_0() { return cPartDependenciesKeyword_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_1() { return cLeftCurlyBracketKeyword_2_1; }

		//expressions+=Dependency+
		public Assignment getExpressionsAssignment_2_2() { return cExpressionsAssignment_2_2; }

		//Dependency
		public RuleCall getExpressionsDependencyParserRuleCall_2_2_0() { return cExpressionsDependencyParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class DependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dependency");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Dependency:
		//	Or;
		public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Dependency:
		//	And ({Or.left=current} "OR" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Dependency:
		//	Primary ({And.left=current} "AND" right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({And.left=current} "AND" right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({And.left=current} "AND" right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cDependencyParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary returns Dependency:
		//	"(" Dependency ")" | Atomic;
		public ParserRule getRule() { return rule; }

		//"(" Dependency ")" | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Dependency ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Dependency
		public RuleCall getDependencyParserRuleCall_0_1() { return cDependencyParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_1() { return cAtomicParserRuleCall_1; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDMQuestionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cQuestionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cQuestionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cQuestionQuestionCrossReference_2_0 = (CrossReference)cQuestionAssignment_2.eContents().get(0);
		private final RuleCall cQuestionQuestionSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cQuestionQuestionCrossReference_2_0.eContents().get(1);
		private final Keyword cAnswerKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnswerAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cAnswerAnswerCrossReference_4_0 = (CrossReference)cAnswerAssignment_4.eContents().get(0);
		private final RuleCall cAnswerAnswerSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cAnswerAnswerCrossReference_4_0.eContents().get(1);
		
		//Atomic returns Dependency:
		//	{DMQuestion} "Question:" question=[surveyImp::Question|STRING] "Answer:" answer=[surveyImp::Answer|STRING];
		public ParserRule getRule() { return rule; }

		//{DMQuestion} "Question:" question=[surveyImp::Question|STRING] "Answer:" answer=[surveyImp::Answer|STRING]
		public Group getGroup() { return cGroup; }

		//{DMQuestion}
		public Action getDMQuestionAction_0() { return cDMQuestionAction_0; }

		//"Question:"
		public Keyword getQuestionKeyword_1() { return cQuestionKeyword_1; }

		//question=[surveyImp::Question|STRING]
		public Assignment getQuestionAssignment_2() { return cQuestionAssignment_2; }

		//[surveyImp::Question|STRING]
		public CrossReference getQuestionQuestionCrossReference_2_0() { return cQuestionQuestionCrossReference_2_0; }

		//STRING
		public RuleCall getQuestionQuestionSTRINGTerminalRuleCall_2_0_1() { return cQuestionQuestionSTRINGTerminalRuleCall_2_0_1; }

		//"Answer:"
		public Keyword getAnswerKeyword_3() { return cAnswerKeyword_3; }

		//answer=[surveyImp::Answer|STRING]
		public Assignment getAnswerAssignment_4() { return cAnswerAssignment_4; }

		//[surveyImp::Answer|STRING]
		public CrossReference getAnswerAnswerCrossReference_4_0() { return cAnswerAnswerCrossReference_4_0; }

		//STRING
		public RuleCall getAnswerAnswerSTRINGTerminalRuleCall_4_0_1() { return cAnswerAnswerSTRINGTerminalRuleCall_4_0_1; }
	}
	
	
	private DependencyModelElements pDependencyModel;
	private SurveyElementsElements pSurveyElements;
	private PartElementsElements pPartElements;
	private DMNextPartsElements pDMNextParts;
	private DependencyElements pDependency;
	private OrElements pOr;
	private AndElements pAnd;
	private PrimaryElements pPrimary;
	private AtomicElements pAtomic;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DependencyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.nordakademie.mwi13a.team1.dependency.Dependency".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DependencyModel:
	//	elements+=SurveyElements+;
	public DependencyModelElements getDependencyModelAccess() {
		return (pDependencyModel != null) ? pDependencyModel : (pDependencyModel = new DependencyModelElements());
	}
	
	public ParserRule getDependencyModelRule() {
		return getDependencyModelAccess().getRule();
	}

	//SurveyElements:
	//	"Survey:" name=[surveyImp::Questionnaire|STRING] "{" partElements+=PartElements+ "}";
	public SurveyElementsElements getSurveyElementsAccess() {
		return (pSurveyElements != null) ? pSurveyElements : (pSurveyElements = new SurveyElementsElements());
	}
	
	public ParserRule getSurveyElementsRule() {
		return getSurveyElementsAccess().getRule();
	}

	//PartElements:
	//	"Part:" name=[surveyImp::Part|STRING] ("Next parts {" (nextParts+=DMNextParts ("OR" nextParts+=DMNextParts)*) "}")+;
	public PartElementsElements getPartElementsAccess() {
		return (pPartElements != null) ? pPartElements : (pPartElements = new PartElementsElements());
	}
	
	public ParserRule getPartElementsRule() {
		return getPartElementsAccess().getRule();
	}

	//DMNextParts:
	//	"Next part:" name=[surveyImp::Part|STRING] ("Part dependencies" "{" expressions+=Dependency+ "}")?;
	public DMNextPartsElements getDMNextPartsAccess() {
		return (pDMNextParts != null) ? pDMNextParts : (pDMNextParts = new DMNextPartsElements());
	}
	
	public ParserRule getDMNextPartsRule() {
		return getDMNextPartsAccess().getRule();
	}

	//Dependency:
	//	Or;
	public DependencyElements getDependencyAccess() {
		return (pDependency != null) ? pDependency : (pDependency = new DependencyElements());
	}
	
	public ParserRule getDependencyRule() {
		return getDependencyAccess().getRule();
	}

	//Or returns Dependency:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Dependency:
	//	Primary ({And.left=current} "AND" right=Primary)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Primary returns Dependency:
	//	"(" Dependency ")" | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Atomic returns Dependency:
	//	{DMQuestion} "Question:" question=[surveyImp::Question|STRING] "Answer:" answer=[surveyImp::Answer|STRING];
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
