/*
* generated by Xtext
*/
package de.nordakademie.mwi13a.team1.dependency.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class DependencyGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SurveyDependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SurveyDependencies");
		private final Assignment cSurveyDependencyAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSurveyDependencySurveyDependencyParserRuleCall_0 = (RuleCall)cSurveyDependencyAssignment.eContents().get(0);
		
		//SurveyDependencies:
		//	surveyDependency+=SurveyDependency+;
		public ParserRule getRule() { return rule; }

		//surveyDependency+=SurveyDependency+
		public Assignment getSurveyDependencyAssignment() { return cSurveyDependencyAssignment; }

		//SurveyDependency
		public RuleCall getSurveyDependencySurveyDependencyParserRuleCall_0() { return cSurveyDependencySurveyDependencyParserRuleCall_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	STRING ("." STRING)*;
		public ParserRule getRule() { return rule; }

		//STRING ("." STRING)*
		public Group getGroup() { return cGroup; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//("." STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1_1() { return cSTRINGTerminalRuleCall_1_1; }
	}

	public class SurveyDependencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SurveyDependency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSurveyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSurveyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSurveyQuestionnaireCrossReference_1_0 = (CrossReference)cSurveyAssignment_1.eContents().get(0);
		private final RuleCall cSurveyQuestionnaireSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cSurveyQuestionnaireCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartSDPartParserRuleCall_3_0 = (RuleCall)cPartAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SurveyDependency:
		//	"Survey:" survey=[surveyImp::Questionnaire|STRING] "{" part+=SDPart+ "}";
		public ParserRule getRule() { return rule; }

		//"Survey:" survey=[surveyImp::Questionnaire|STRING] "{" part+=SDPart+ "}"
		public Group getGroup() { return cGroup; }

		//"Survey:"
		public Keyword getSurveyKeyword_0() { return cSurveyKeyword_0; }

		//survey=[surveyImp::Questionnaire|STRING]
		public Assignment getSurveyAssignment_1() { return cSurveyAssignment_1; }

		//[surveyImp::Questionnaire|STRING]
		public CrossReference getSurveyQuestionnaireCrossReference_1_0() { return cSurveyQuestionnaireCrossReference_1_0; }

		//STRING
		public RuleCall getSurveyQuestionnaireSTRINGTerminalRuleCall_1_0_1() { return cSurveyQuestionnaireSTRINGTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//part+=SDPart+
		public Assignment getPartAssignment_3() { return cPartAssignment_3; }

		//SDPart
		public RuleCall getPartSDPartParserRuleCall_3_0() { return cPartSDPartParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class SDPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPart2Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPart2PartCrossReference_1_0 = (CrossReference)cPart2Assignment_1.eContents().get(0);
		private final RuleCall cPart2PartSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cPart2PartCrossReference_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNextPartDefaultKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDefaultNextPartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cDefaultNextPartPartCrossReference_4_0 = (CrossReference)cDefaultNextPartAssignment_4.eContents().get(0);
		private final RuleCall cDefaultNextPartPartSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cDefaultNextPartPartCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cNextPartsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cNextPartsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cNextPartsSDNextPartsParserRuleCall_5_1_0 = (RuleCall)cNextPartsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//SDPart:
		//	"Part:" part2=[surveyImp::Part|STRING] "{" "Next part (default):" defaultNextPart=[surveyImp::Part|STRING]
		//	("Next parts {" nextParts+=SDNextParts* "}")? "}";
		public ParserRule getRule() { return rule; }

		//"Part:" part2=[surveyImp::Part|STRING] "{" "Next part (default):" defaultNextPart=[surveyImp::Part|STRING]
		//("Next parts {" nextParts+=SDNextParts* "}")? "}"
		public Group getGroup() { return cGroup; }

		//"Part:"
		public Keyword getPartKeyword_0() { return cPartKeyword_0; }

		//part2=[surveyImp::Part|STRING]
		public Assignment getPart2Assignment_1() { return cPart2Assignment_1; }

		//[surveyImp::Part|STRING]
		public CrossReference getPart2PartCrossReference_1_0() { return cPart2PartCrossReference_1_0; }

		//STRING
		public RuleCall getPart2PartSTRINGTerminalRuleCall_1_0_1() { return cPart2PartSTRINGTerminalRuleCall_1_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"Next part (default):"
		public Keyword getNextPartDefaultKeyword_3() { return cNextPartDefaultKeyword_3; }

		//defaultNextPart=[surveyImp::Part|STRING]
		public Assignment getDefaultNextPartAssignment_4() { return cDefaultNextPartAssignment_4; }

		//[surveyImp::Part|STRING]
		public CrossReference getDefaultNextPartPartCrossReference_4_0() { return cDefaultNextPartPartCrossReference_4_0; }

		//STRING
		public RuleCall getDefaultNextPartPartSTRINGTerminalRuleCall_4_0_1() { return cDefaultNextPartPartSTRINGTerminalRuleCall_4_0_1; }

		//("Next parts {" nextParts+=SDNextParts* "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"Next parts {"
		public Keyword getNextPartsKeyword_5_0() { return cNextPartsKeyword_5_0; }

		//nextParts+=SDNextParts*
		public Assignment getNextPartsAssignment_5_1() { return cNextPartsAssignment_5_1; }

		//SDNextParts
		public RuleCall getNextPartsSDNextPartsParserRuleCall_5_1_0() { return cNextPartsSDNextPartsParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5_2() { return cRightCurlyBracketKeyword_5_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class SDNextPartsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDNextParts");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextPartKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNextPartAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNextPartPartCrossReference_1_0 = (CrossReference)cNextPartAssignment_1.eContents().get(0);
		private final RuleCall cNextPartPartSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cNextPartPartCrossReference_1_0.eContents().get(1);
		private final Keyword cPartDependenciesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPartDependenciesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPartDependenciesSDPartDependenciesParserRuleCall_3_0 = (RuleCall)cPartDependenciesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cANDKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cORKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Assignment cPartDependenciesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPartDependenciesSDPartDependenciesParserRuleCall_4_1_0 = (RuleCall)cPartDependenciesAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SDNextParts:
		//	"Next part:" nextPart+=[surveyImp::Part|STRING] "Part dependencies {" partDependencies+=SDPartDependencies (("AND" |
		//	"OR") partDependencies+=SDPartDependencies)* "}";
		public ParserRule getRule() { return rule; }

		//"Next part:" nextPart+=[surveyImp::Part|STRING] "Part dependencies {" partDependencies+=SDPartDependencies (("AND" |
		//"OR") partDependencies+=SDPartDependencies)* "}"
		public Group getGroup() { return cGroup; }

		//"Next part:"
		public Keyword getNextPartKeyword_0() { return cNextPartKeyword_0; }

		//nextPart+=[surveyImp::Part|STRING]
		public Assignment getNextPartAssignment_1() { return cNextPartAssignment_1; }

		//[surveyImp::Part|STRING]
		public CrossReference getNextPartPartCrossReference_1_0() { return cNextPartPartCrossReference_1_0; }

		//STRING
		public RuleCall getNextPartPartSTRINGTerminalRuleCall_1_0_1() { return cNextPartPartSTRINGTerminalRuleCall_1_0_1; }

		//"Part dependencies {"
		public Keyword getPartDependenciesKeyword_2() { return cPartDependenciesKeyword_2; }

		//partDependencies+=SDPartDependencies
		public Assignment getPartDependenciesAssignment_3() { return cPartDependenciesAssignment_3; }

		//SDPartDependencies
		public RuleCall getPartDependenciesSDPartDependenciesParserRuleCall_3_0() { return cPartDependenciesSDPartDependenciesParserRuleCall_3_0; }

		//(("AND" | "OR") partDependencies+=SDPartDependencies)*
		public Group getGroup_4() { return cGroup_4; }

		//"AND" | "OR"
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//"AND"
		public Keyword getANDKeyword_4_0_0() { return cANDKeyword_4_0_0; }

		//"OR"
		public Keyword getORKeyword_4_0_1() { return cORKeyword_4_0_1; }

		//partDependencies+=SDPartDependencies
		public Assignment getPartDependenciesAssignment_4_1() { return cPartDependenciesAssignment_4_1; }

		//SDPartDependencies
		public RuleCall getPartDependenciesSDPartDependenciesParserRuleCall_4_1_0() { return cPartDependenciesSDPartDependenciesParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class SDPartDependenciesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SDPartDependencies");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cQuestionQuestionCrossReference_1_0 = (CrossReference)cQuestionAssignment_1.eContents().get(0);
		private final RuleCall cQuestionQuestionSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cQuestionQuestionCrossReference_1_0.eContents().get(1);
		private final Keyword cAnswerKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAnswerAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cAnswerAnswerCrossReference_3_0 = (CrossReference)cAnswerAssignment_3.eContents().get(0);
		private final RuleCall cAnswerAnswerSTRINGTerminalRuleCall_3_0_1 = (RuleCall)cAnswerAnswerCrossReference_3_0.eContents().get(1);
		
		//SDPartDependencies:
		//	"Question:" question=[surveyImp::Question|STRING] "Answer:" answer=[surveyImp::Answer|STRING];
		public ParserRule getRule() { return rule; }

		//"Question:" question=[surveyImp::Question|STRING] "Answer:" answer=[surveyImp::Answer|STRING]
		public Group getGroup() { return cGroup; }

		//"Question:"
		public Keyword getQuestionKeyword_0() { return cQuestionKeyword_0; }

		//question=[surveyImp::Question|STRING]
		public Assignment getQuestionAssignment_1() { return cQuestionAssignment_1; }

		//[surveyImp::Question|STRING]
		public CrossReference getQuestionQuestionCrossReference_1_0() { return cQuestionQuestionCrossReference_1_0; }

		//STRING
		public RuleCall getQuestionQuestionSTRINGTerminalRuleCall_1_0_1() { return cQuestionQuestionSTRINGTerminalRuleCall_1_0_1; }

		//"Answer:"
		public Keyword getAnswerKeyword_2() { return cAnswerKeyword_2; }

		//answer=[surveyImp::Answer|STRING]
		public Assignment getAnswerAssignment_3() { return cAnswerAssignment_3; }

		//[surveyImp::Answer|STRING]
		public CrossReference getAnswerAnswerCrossReference_3_0() { return cAnswerAnswerCrossReference_3_0; }

		//STRING
		public RuleCall getAnswerAnswerSTRINGTerminalRuleCall_3_0_1() { return cAnswerAnswerSTRINGTerminalRuleCall_3_0_1; }
	}
	
	
	private SurveyDependenciesElements pSurveyDependencies;
	private QualifiedNameElements pQualifiedName;
	private SurveyDependencyElements pSurveyDependency;
	private SDPartElements pSDPart;
	private SDNextPartsElements pSDNextParts;
	private SDPartDependenciesElements pSDPartDependencies;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public DependencyGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.nordakademie.mwi13a.team1.dependency.Dependency".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SurveyDependencies:
	//	surveyDependency+=SurveyDependency+;
	public SurveyDependenciesElements getSurveyDependenciesAccess() {
		return (pSurveyDependencies != null) ? pSurveyDependencies : (pSurveyDependencies = new SurveyDependenciesElements());
	}
	
	public ParserRule getSurveyDependenciesRule() {
		return getSurveyDependenciesAccess().getRule();
	}

	//QualifiedName:
	//	STRING ("." STRING)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//SurveyDependency:
	//	"Survey:" survey=[surveyImp::Questionnaire|STRING] "{" part+=SDPart+ "}";
	public SurveyDependencyElements getSurveyDependencyAccess() {
		return (pSurveyDependency != null) ? pSurveyDependency : (pSurveyDependency = new SurveyDependencyElements());
	}
	
	public ParserRule getSurveyDependencyRule() {
		return getSurveyDependencyAccess().getRule();
	}

	//SDPart:
	//	"Part:" part2=[surveyImp::Part|STRING] "{" "Next part (default):" defaultNextPart=[surveyImp::Part|STRING]
	//	("Next parts {" nextParts+=SDNextParts* "}")? "}";
	public SDPartElements getSDPartAccess() {
		return (pSDPart != null) ? pSDPart : (pSDPart = new SDPartElements());
	}
	
	public ParserRule getSDPartRule() {
		return getSDPartAccess().getRule();
	}

	//SDNextParts:
	//	"Next part:" nextPart+=[surveyImp::Part|STRING] "Part dependencies {" partDependencies+=SDPartDependencies (("AND" |
	//	"OR") partDependencies+=SDPartDependencies)* "}";
	public SDNextPartsElements getSDNextPartsAccess() {
		return (pSDNextParts != null) ? pSDNextParts : (pSDNextParts = new SDNextPartsElements());
	}
	
	public ParserRule getSDNextPartsRule() {
		return getSDNextPartsAccess().getRule();
	}

	//SDPartDependencies:
	//	"Question:" question=[surveyImp::Question|STRING] "Answer:" answer=[surveyImp::Answer|STRING];
	public SDPartDependenciesElements getSDPartDependenciesAccess() {
		return (pSDPartDependencies != null) ? pSDPartDependencies : (pSDPartDependencies = new SDPartDependenciesElements());
	}
	
	public ParserRule getSDPartDependenciesRule() {
		return getSDPartDependenciesAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
