/*
 * generated by Xtext
 */
package de.nordakademie.mwi13a.team1.dependency.validation

import static extension org.eclipse.emf.ecore.util.EcoreUtil.*
import static extension org.eclipse.xtext.EcoreUtil2.*

import org.eclipse.xtext.validation.Check
import de.nordakademie.mwi13a.team1.dependency.dependency.DMNextParts
import de.nordakademie.mwi13a.team1.dependency.dependency.PartElements
import de.nordakademie.mwi13a.team1.survey.survey.Part
import de.nordakademie.mwi13a.team1.dependency.dependency.DependencyPackage
import de.nordakademie.mwi13a.team1.survey.survey.Questionnaire
import de.nordakademie.mwi13a.team1.dependency.dependency.SurveyElements
import de.nordakademie.mwi13a.team1.dependency.dependency.DMQuestion
import static extension de.nordakademie.mwi13a.team1.dependency.util.DependencyUtil.*
//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DependencyValidator extends AbstractDependencyValidator {
		
	@Check
	def checkNextPart(DMNextParts nextPart) {
		val previousPart = (nextPart.eContainer as PartElements).name
		val destinationPart = (nextPart.name as Part)
		if (previousPart.equals(destinationPart)) {
			error("Ein Abschnitt darf nicht auf sich selbst verweisen!",
				DependencyPackage.Literals.DM_NEXT_PARTS__NAME
			)
		}
	}
	
	@Check
	def checkPartMembership(PartElements partElement) {
		val survey = (partElement.eContainer as SurveyElements).name
		val part = (partElement.name as Part)
		if (!survey.equals(part.eContainer)) {
			error("Der Abschnitt geh√∂rt nicht zu dem Fragebogen!",
				DependencyPackage.Literals.PART_ELEMENTS__NAME
			)
		}
	}
	//@Check
	//def checkPartSurvey(SDPart part) {
	//	val surveyName = (part.eContainer as SurveyDependency).survey.name
	//	val questionaireName = (part.part2.eContainer as Questionnaire).name
		
	//	if (!surveyName.equals(questionaireName)) {
	//		error("Meine Fehlermeldung. Endlich!!!",
	//			DependencyPackage.Literals.SD_PART__PART2
	//		)
	//	}
	//}
	
	//@Check 
	//def checkDefaultPart(SDPart part) {
	//	val rootPartName = part.part2.name
	//	val destinationPartName = part.defaultNextPart.name
		
	//	if (rootPartName.equals(destinationPartName)) {
	//		error("Eine Seite kann nicht auf sich selbst verweisen.",
	//			DependencyPackage.Literals.SD_PART__DEFAULT_NEXT_PART
	//		)
	//	}
	//}
	
	//@Check
	//def checkNextParts(SDNextParts nextPart) {
//		val rootPartName = (nextPart.eContainer as SDPart).part2.name
//		val destinationPartName = (nextPart.)
//	}
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
