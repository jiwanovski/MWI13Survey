/*
 * generated by Xtext
 */
package de.nordakademie.mwi13a.team1.dependency.validation

import static extension de.nordakademie.mwi13a.team1.dependency.util.DependencyUtil.*
import de.nordakademie.mwi13a.team1.dependency.dependency.DMMatrixQuestion
import de.nordakademie.mwi13a.team1.dependency.dependency.DMNextParts
import de.nordakademie.mwi13a.team1.dependency.dependency.DMQuestion
import de.nordakademie.mwi13a.team1.dependency.dependency.DefineNextPart
import de.nordakademie.mwi13a.team1.dependency.dependency.DependencyPackage
import de.nordakademie.mwi13a.team1.dependency.dependency.PartElements
import de.nordakademie.mwi13a.team1.dependency.dependency.SurveyElements
import de.nordakademie.mwi13a.team1.survey.survey.Part
import org.eclipse.xtext.validation.Check

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DependencyValidator extends AbstractDependencyValidator {
	public static val CHECK_NEXT_PART = "de.nordakademie.mwi13a.team1.dependency.checkNextPart"
	public static val CHECK_NEXT_PARTS_EXISTS = "de.nordakademie.mwi13a.team1.dependency.checkNextPartExists"
	public static val CHECK_PART_MEMBERSHIP_PARTELEMENTS = "de.nordakademie.mwi13a.team1.dependency.checkPartMembershipPartElements"
	public static val CHECK_PART_MEMBERSHIP_DMNEXTPARTS = "de.nordakademie.mwi13a.team1.dependency.checkPartMembershipDMNextParts"
	public static val CHECK_QUESTION_MEMBERSHIP = "de.nordakademie.mwi13a.team1.dependency.checkQuestionMembership"
	public static val CHECK_ANSWERS_MEMBERSHIP = "de.nordakademie.mwi13a.team1.dependency.checkAnswerMembership" 
	public static val CHECK_MATRIXQUESTION_MEMBERSHIP = "de.nordakademie.mwi13a.team1.dependency.checkMatrixQuestionMembership"
	public static val CHECK_MATRIXANSWER_MEMBERSHIP = "de.nordakademie.mwi13a.team1.dependency.checkMatrixAnswerMembership"
	
	
	@Check
	def checkPartHierarchy(PartElements e) {
		if (e.partHierarchy.contains(e)) {
			
		}
	}
	
	//A Part may not have a reference to itself
	@Check
	def checkNextPart(DMNextParts nextPart) {
		val previousPart = ((nextPart.eContainer as DefineNextPart).eContainer as PartElements).name
		val destinationPart = (nextPart.name as Part)
		if (previousPart.equals(destinationPart)) {
			error("A Part may not have a reference to itself!",
				DependencyPackage::eINSTANCE.DMNextParts_Name,
				CHECK_NEXT_PART,
				nextPart.name.toString)
		}
	}
	
	//For a Part may not be defined the same Next Part several times
	@Check
	def checkNextPartExists(DMNextParts nextPart) {
		var i = 0
		for (part: (nextPart.eContainer as DefineNextPart).nextParts) {			
			if (nextPart.name.equals(part.name)) {				
				i = i + 1
				if (i == 2) {
					error("This part is referred several times.",
					DependencyPackage::eINSTANCE.DMNextParts_Name,
					CHECK_NEXT_PARTS_EXISTS,	
					nextPart.name.toString)
				}
			}			
		}
	}
	
	//Every Part for which Dependencies are defined must be a member of its Questionnaire
	@Check
	def checkPartMembership(PartElements partElement) {
		val survey = (partElement.eContainer as SurveyElements).name
		val part = (partElement.name as Part)
		if (!survey.equals(part.eContainer)) {
			error("This Part is not a member of the Questionnaire!",
			DependencyPackage::eINSTANCE.partElements_Name,
			CHECK_PART_MEMBERSHIP_PARTELEMENTS,
			partElement.name.toString)
		}
	}
	
	@Check
	def checkPartMembership(DMNextParts nextPart) {
		var q = nextPart.containingSurveyElement.name
		var q2 = nextPart.name.containingQuestionnaire
		if (!q.equals(q2)) {
			error("This Part is not a member of the Questionnaire!",
			DependencyPackage::eINSTANCE.DMNextParts_Name,
			CHECK_PART_MEMBERSHIP_DMNEXTPARTS,
			nextPart.name.toString)
		}
	}
	
	@Check
	def checkQuestionMembership(DMQuestion q) {
		val expectedPart = q.containingPartElement.name
		val actualPart = q.question.containingPart
		if (!expectedPart.equals(actualPart)) {
			error("This Question is not a member of the Part!",
			DependencyPackage::eINSTANCE.DMQuestion_Question,
			CHECK_QUESTION_MEMBERSHIP,
			q.question.toString)
		}
	}
	
	//Dependencies may only be defined for corresponding Questions and Answers
	@Check
	def checkAnswerMembership(DMQuestion q) {
		val expectedQuestion = q.question
		val actualQuestion = q.answer.containingQuestion
		if (!expectedQuestion.equals(actualQuestion)) {
			error("This Answer is not a member of the Question!",
			DependencyPackage::eINSTANCE.DMQuestion_Answer,
			CHECK_ANSWERS_MEMBERSHIP,
			q.answer.toString)
		}		
	}
	
	@Check
	def checkMatrixQuestionMembership(DMMatrixQuestion mq) {
		val expectedPart = mq.containingPartElement.name
		val actualPart = mq.question.containingPart
		if (!expectedPart.equals(actualPart)) {
			error("This Matrix Question is not a member of the Part!",
			DependencyPackage::eINSTANCE.DMMatrixQuestion_Question,
			CHECK_MATRIXQUESTION_MEMBERSHIP,
			mq.question.toString)
		}
	}
	
	@Check
	def checkMatrixAnswerMembership(DMMatrixQuestion mq) {
		val expectedMatrix = mq.question.containingMatrix
		val actualMatrix = mq.answer.containingMatrix
		if (!expectedMatrix.equals(actualMatrix)) {
			error("This Matrix Answer is not a member of the Matrix!",
			DependencyPackage::eINSTANCE.DMMatrixQuestion_Answer,
			CHECK_MATRIXANSWER_MEMBERSHIP,
			mq.answer.toString)
		}
	}
}
