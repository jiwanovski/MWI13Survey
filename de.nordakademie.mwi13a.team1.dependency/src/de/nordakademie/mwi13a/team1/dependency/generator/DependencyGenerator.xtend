/*
 * generated by Xtext 
 */
package de.nordakademie.mwi13a.team1.dependency.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import de.nordakademie.mwi13a.team1.dependency.dependency.DependencyModel
import de.nordakademie.mwi13a.team1.survey.survey.Part
import de.nordakademie.mwi13a.team1.dependency.dependency.Dependency
import de.nordakademie.mwi13a.team1.dependency.dependency.And
import de.nordakademie.mwi13a.team1.dependency.dependency.Or
import org.eclipse.xtend2.lib.StringConcatenation
import de.nordakademie.mwi13a.team1.survey.survey.Question
import de.nordakademie.mwi13a.team1.dependency.dependency.DMMatrixQuestion
import de.nordakademie.mwi13a.team1.survey.survey.MatrixQuestion
import de.nordakademie.mwi13a.team1.dependency.dependency.PartElements
import de.nordakademie.mwi13a.team1.survey.survey.Questionnaire
import de.nordakademie.mwi13a.team1.dependency.dependency.DMQuestion
import de.nordakademie.mwi13a.team1.survey.survey.Matrix
import de.nordakademie.mwi13a.team1.dependency.dependency.Bracket

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DependencyGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		val dm = resource.contents.head as DependencyModel
		if (dm !=null) {
			for (survey: dm.elements) {
				for (part: survey.partElements) {
					val fileName = (survey.name as Questionnaire).name + "_" + (part.name as Part).name 
					fsa.generateFile(fileName + ".java",toServlet(part))
				}			
			}
		}
	}
	
	def toServlet(PartElements part) '''		
		«generalServletHead»
		
		@WebServlet("/«(part.name as Part).name.replace(" ","_")»Servlet")
		public class «(part.name as Part).name.replace(" ","_")» extends HttpServlet {
			private static final long serialVersionUID = 1L;
			
			@Override
			protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
				// Prepare messages.
				Map<String, String> messages = new HashMap<String, String>();
				request.setAttribute("messages", messages);
						
				String nextPart;
				«FOR parameter: part.nextParts»
					«FOR expression: parameter.expressions»
						«getParameter(expression)»
					«ENDFOR»
				«ENDFOR»		
				«FOR dependency: part.nextParts»
					«FOR expression: dependency.expressions»
						// Check next page dependencies
						if («solveDependencies(expression)») {
							nextPart = "«(dependency.name as Part).name.replace(" ","_")».jsp";
						}
					«ENDFOR»					
				«ENDFOR»
				// call next page
				request.getRequestDispatcher(nextPart).forward(request, response);
			}
		}
	'''
	// ------- GET PARAMETER -----------------------------------------
	def dispatch Object getParameter(Dependency d) '''
		«switch (d) {
			And: {
				(d.left.getParameter as StringConcatenation).toString + (d.right.getParameter as StringConcatenation).toString
			}
			Or: {
				(d.left.getParameter as StringConcatenation).toString + (d.right.getParameter as StringConcatenation).toString
			}
			Bracket : {
				d.dependency.getParameter			
			}
			
			DMQuestion: {
				printVariableBlock(d.question.id, (d.question as Question).mandatory)			
			}
			
			DMMatrixQuestion: {
				printVariableBlock(d.question.id, (((d.question as MatrixQuestion).eContainer as Matrix).eContainer as Question).mandatory)				
			}
		}»
	'''
		
	// ------- SOLVE DEPENDENCIES--------------------------------------
	def dispatch Object solveDependencies(Dependency d) '''
		«switch (d) {
			And: {
				printAnd(d)
			}
			Or: {
				printOr(d)
			}
			Bracket : {
				printBracket(d)			
			}
			DMQuestion: {
				solveQuestion(d)
			}
			
			DMMatrixQuestion: {
				solveQuestion(d)			
			}
		}»
	'''
	
	def solveQuestion(DMQuestion question) '''
		(«question.question.id».equals("«question.answer.id»")) 
	'''
	
	def solveQuestion(DMMatrixQuestion question) '''
		(«question.question.id».equals("«question.answer.id»")) 
	'''
	
	def solveMatrixQuestion(DMMatrixQuestion q) '''
		(«q.matrixQuestion.id».equals("«q.matrixScale.id»"))
	'''
	
	def printAnd(And and) '''
		«(and.left.solveDependencies as StringConcatenation)» && «(and.right.solveDependencies as StringConcatenation)»
	'''
	
	def printOr(Or or) '''
		«(or.left.solveDependencies as StringConcatenation)» || «(or.right.solveDependencies as StringConcatenation)»
	'''
	
	def printBracket(Bracket bracket) '''
		(«(bracket.dependency.solveDependencies as StringConcatenation)»)
	'''
	
	def printVariableBlock(String id, Boolean mandatory) '''
		// get and validate «id»
		String «id» = request.getParameter("«id»");
		«IF mandatory»
		if («id» == null || «id».trim().isEmpty()) {
			messages.put("«id»","Please enter a value");
		}
		«ENDIF»	
	'''
	
	def generalServletHead() '''
		package de.helloworld2;

		import java.io.IOException;
		import java.util.HashMap;
		import java.util.Map;

		import javax.servlet.ServletException;
		import javax.servlet.annotation.WebServlet;
		import javax.servlet.http.HttpServlet;
		import javax.servlet.http.HttpServletRequest;
		import javax.servlet.http.HttpServletResponse;
	'''
	
	def servletClassHead() '''
		
	'''
}
	
