/*
 * generated by Xtext 
 */
package de.nordakademie.mwi13a.team1.dependency.generator

import static extension de.nordakademie.mwi13a.team1.dependency.util.DependencyUtil.*
import de.nordakademie.mwi13a.team1.dependency.DependencyOutputConfiguration
import de.nordakademie.mwi13a.team1.dependency.dependency.And
import de.nordakademie.mwi13a.team1.dependency.dependency.Bracket
import de.nordakademie.mwi13a.team1.dependency.dependency.DMMatrixQuestion
import de.nordakademie.mwi13a.team1.dependency.dependency.DMQuestion
import de.nordakademie.mwi13a.team1.dependency.dependency.DefineNextPart
import de.nordakademie.mwi13a.team1.dependency.dependency.Dependency
import de.nordakademie.mwi13a.team1.dependency.dependency.DependencyModel
import de.nordakademie.mwi13a.team1.dependency.dependency.LastPart
import de.nordakademie.mwi13a.team1.dependency.dependency.Or
import de.nordakademie.mwi13a.team1.dependency.dependency.PartElements
import de.nordakademie.mwi13a.team1.survey.survey.Part
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtend2.lib.StringConcatenation
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import de.nordakademie.mwi13a.team1.survey.survey.Questionnaire
import de.nordakademie.mwi13a.team1.dependency.dependency.SurveyElements
import de.nordakademie.mwi13a.team1.survey.survey.CheckBox
import de.nordakademie.mwi13a.team1.survey.survey.TextLine
import de.nordakademie.mwi13a.team1.survey.survey.TextBlock
import de.nordakademie.mwi13a.team1.survey.survey.Radio
import de.nordakademie.mwi13a.team1.survey.survey.DropDown
import de.nordakademie.mwi13a.team1.survey.survey.Matrix
import org.eclipse.emf.common.util.EList
import de.nordakademie.mwi13a.team1.survey.survey.Answer

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DependencyGenerator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		val dm = resource.contents.head as DependencyModel
		if (dm !=null) {
			// Generate the web.xml
			fsa.generateFile("web.xml", DependencyOutputConfiguration::GEN_WEBXML_OUTPUT, dm.toWebXml)
			// Generate the StartEmbeddedApache.java
			fsa.generateFile("StartEmbeddedApache.java", DependencyOutputConfiguration::GEN_EMBEDDED_APACHE_OUTPUT, dm.toStartEmbeddedApache)
			for (survey: dm.elements) {
				// Generate overview servlets
				val fileNameOverviewServlet = (survey.name as Questionnaire).name.cleanUpString + "OverviewServlet.java"			
				fsa.generateFile(fileNameOverviewServlet, DependencyOutputConfiguration::GEN_SERVLET_OUTPUT, survey.toOverviewServlet)				
				for (part: survey.partElements) {
					// Generate the Beans
					val fileNameBean = part.getObjectName + "Bean"
					fsa.generateFile(fileNameBean + ".java", DependencyOutputConfiguration::GEN_BEAN_OUTPUT, part.toBean)
					// Generate the Servlets
					val fileNameServlet = part.getObjectName + "Servlet"
					fsa.generateFile(fileNameServlet + ".java", DependencyOutputConfiguration::GEN_SERVLET_OUTPUT, part.toServlet)
				}			
			}
		}
	}
	
	def toOverviewServlet(SurveyElements e) '''
		package servlets;

		import java.io.IOException;
		import java.io.PrintWriter;
		import java.util.ArrayList;
		import java.util.List;

		import javax.servlet.ServletException;
		import javax.servlet.http.HttpServlet;
		import javax.servlet.http.HttpServletRequest;
		import javax.servlet.http.HttpServletResponse;

		import com.mongodb.DB;
		import com.mongodb.DBCollection;
		import com.mongodb.DBCursor;
		import com.mongodb.DBObject;
		import com.mongodb.MongoClient;
		
		«FOR p: e.partElements»
			import beans.«p.getObjectName»Bean;
		«ENDFOR»
		
		public class «(e.name as Questionnaire).name.cleanUpString»OverviewServlet extends HttpServlet {
			private static final long serialVersionUID = 1L;
			protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
				// Connect to MongoDB
				MongoClient mongoClient = new MongoClient();
				DBCursor cursor;
				DB db = mongoClient.getDB("surveyDB");
				«FOR p: e.partElements»
					DBCollection «p.getObjectName»Collection;
					«p.getObjectName»Collection = db.getCollection("«p.getObjectName»Collection");
					
					if («p.getObjectName»Collection == null) {
						«p.getObjectName»Collection = db.createCollection("«p.getObjectName»Collection", null);
					}
					
					cursor = «p.getObjectName»Collection.find();
					List<«p.getObjectName»Bean> «p.getObjectName»List = new ArrayList<«p.getObjectName»Bean>();
					while (cursor.hasNext()) {
						DBObject dbo = cursor.next();
						«p.getObjectName»Bean Bean«p.getObjectName» = «p.getObjectName»Bean.fromDBObject(dbo);
						
						«p.getObjectName»List.add(Bean«p.getObjectName»);
					}
				«ENDFOR»
				
				
				
				response.setContentType("text/html");
				PrintWriter out = response.getWriter();
				out.println("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 " +
					"Transitional//EN\">\n" +
					"<link rel='stylesheet' type='text/css' href='" + request.getContextPath() +  "/css/default.css'/>\n"+
					"<HTML>\n" +
					"<HEAD><TITLE>«(e.name as Questionnaire).name»</TITLE></HEAD>\n" +
					"<BODY>\n<FORM><DIV>" +
					"<H1>«(e.name as Questionnaire).name»</H1>");
					«FOR p: e.partElements»
						out.println("<fieldset class='part'>\n" +
							"<legend>«p.name.name»</legend>");
						«FOR q: p.name.question»
							«switch(q.questionType) {
										
								Radio: {
									q.name.printOverviewQuestionLine;
									(q.questionType as Radio).answer.printOverviewAnswerLine 																																				
								}
								CheckBox: {
									q.name.printOverviewQuestionLine;
									(q.questionType as CheckBox).answer.printOverviewAnswerLine
								}
								DropDown: {
									q.name.printOverviewQuestionLine;
									(q.questionType as DropDown).answer.printOverviewAnswerLine
								}
								Matrix: {
									q.name.printOverviewQuestionLine;
									(q.questionType as Matrix).printOverviewMatrix									
								}								
							}»
						«ENDFOR»
						out.println("</fieldset>\n");
					«ENDFOR»
					out.println("</DIV></FORM></BODY></HTML>");
			}
		}
	'''
	
	def toBean(PartElements part) '''
		package beans;
		import com.mongodb.BasicDBObject;
		import com.mongodb.DBObject;

		public class «part.getObjectName»Bean {
			«FOR q: (part.name as Part).partParams»
				private String «q.getID»;
				public String get«q.getID»() {
					return «q.getID»;
				}
				public void set«q.getID»(String «q.getID») {
					this.«q.getID» = «q.getID»;
				}
				
			«ENDFOR»
			public BasicDBObject toDBObject() {
				BasicDBObject document = new BasicDBObject();
				«FOR q: (part.name as Part).partParams»
					document.put("«q.getID»", «q.getID»);
				«ENDFOR»
				return document;
			}
		
			public static «part.getObjectName»Bean fromDBObject(DBObject document) {
				«part.getObjectName»Bean b = new «part.getObjectName»Bean();
				«FOR q: (part.name as Part).partParams»					
						b.«q.getID» = (String) document.get("«q.getID»");
				«ENDFOR»
				return b;
			}
		}
	'''
	
	def toServlet(PartElements part) '''		
		«generalServletHead»
		import beans.«part.getObjectName»Bean;
		
		public class «part.getObjectName»Servlet extends HttpServlet {
			private static final long serialVersionUID = 1L;
			
			@Override
			protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
				// Prepare messages.
				Map<String, String> messages = new HashMap<String, String>();
				request.setAttribute("messages", messages);
						
				String nextPart = "";
				
				// Connect to MongoDB
				DBCollection ownCollection;
				MongoClient mongoClient = new MongoClient();

				DB db = mongoClient.getDB("surveyDB");
				ownCollection = db.getCollection("«part.getObjectName»»");
		
				if (ownCollection == null) {
					ownCollection = db.createCollection("«part.getObjectName»", null);
				}
				// create    
				«part.getObjectName»Bean ownBean = new «part.getObjectName»Bean();
				
				«FOR q: (part.name as Part).partParams»
					// get and validate «q.getID»
					String «q.getID» = request.getParameter("«q.getID»");
					«IF q.isMandatory»
						if («q.getID» == null || «q.getID».trim().isEmpty()) {
							messages.put("«q.getID»","Please enter a value");
						}
					«ENDIF»
					ownBean.set«q.getID»(«q.getID»);
				«ENDFOR»
				BasicDBObject doc = ownBean.toDBObject();
				ownCollection.insert(doc);
				
				«switch(part.option) {
					DefineNextPart: {
						printNextParts((part.option as DefineNextPart))
					}
					
					LastPart: {
						printLastPart
					}
				}»
			}
		}
	'''
	
	def toWebXml(DependencyModel dm) '''
		<?xml version="1.0" encoding="ISO-8859-1"?>

		<web-app xmlns="http://java.sun.com/xml/ns/javaee"
			xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
			http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
			version="3.0"
			metadata-complete="true">  

			<display-name>Survey WebApp</display-name>
		«FOR survey: dm.elements»		
			«FOR part: survey.partElements»
				<servlet>
					<servlet-name>«part.getObjectName»Servlet</servlet-name>
					<servlet-class>servlets.«part.getObjectName»Servlet</servlet-class>
				</servlet>
				<servlet-mapping>
					<servlet-name>«part.getObjectName»Servlet</servlet-name>
					<url-pattern>/«part.getObjectName»</url-pattern>
				</servlet-mapping>
			«ENDFOR»	
			<servlet>
				<servlet-name>«(survey.name as Questionnaire).name.cleanUpString»OverviewServlet</servlet-name>
				<servlet-class>servlets.«(survey.name as Questionnaire).name.cleanUpString»OverviewServlet</servlet-class>
			</servlet>
			<servlet-mapping>
				<servlet-name>«(survey.name as Questionnaire).name.cleanUpString»OverviewServlet</servlet-name>
				<url-pattern>/«(survey.name as Questionnaire).name.cleanUpString»</url-pattern>
			</servlet-mapping>
		«ENDFOR»	
			<welcome-file-list>
				<welcome-file>index.jsp</welcome-file>  	
			</welcome-file-list>
		</web-app>
	'''
	
	def printNextParts(DefineNextPart np) '''															
		«FOR dependency: np.nextParts»
			«IF (dependency.expressions.length == 0)»
				nextPart = "«getQuestionaireName(np.containingPartElement).cleanUpString»«dependency.name.name.cleanUpString».jsp";
			«ELSE»
				«FOR expression: dependency.expressions»
					// Check next page dependencies
					if («solveDependencies(expression)») {
						nextPart = "«getQuestionaireName(np.containingPartElement).cleanUpString»«(dependency.name as Part).name.cleanUpString».jsp";
					}
				«ENDFOR»
			«ENDIF»						
		«ENDFOR»
		// call next page
		request.getRequestDispatcher(nextPart).forward(request, response);
	'''
	
	def printLastPart() '''
		request.getRequestDispatcher("final.jsp").forward(request, response);
	'''
	
	def printOverviewQuestionLine(String q) '''
		out.println(
			"<p>" +
				"<label class='lblQuestion'>Frage:</label>" +
			"</p>" +
			"<p>" +
				"<label>«q»</label>" +
			"</p>"
		);
	'''
	
	def printOverviewAnswerLine(EList<Answer> a) '''
		out.println(
			"<p>" +
				"<label class='lblQuestion'>Antworten/Anzahl:</label>" +
			"</p>" +
			"<p>" +
				"<ol>" +
					«FOR a2: a»
						"<li>«a2.name»+ Anzahl</li>" +
					«ENDFOR»
				"</ol>" +
				"</p>"
		);
	'''
	
	def printOverviewMatrix(Matrix m) '''
		out.println(
			"<table cellspacing='5'>" +
				"<tr>" +
					"<td>&nbsp;</td>" +
					«FOR answer: m.answer»
						"<td>«answer.name»</td>" +
					«ENDFOR»
				"</tr>" +
				"<tr>" +
					«FOR matrixquestion: m.matrixQuestion»
						"<tr>" +
							"<td>«matrixquestion.name»</td>" +
							«FOR answer: m.answer»
								"<td class='radio'>" +
									"<input class='matrix' type='radio' name='«matrixquestion.id»' value='«answer.id»'/>" +
								"</td>" +
							«ENDFOR»
						"</tr>" +
					«ENDFOR»
			"</table>"
		);
	'''
	
	def toStartEmbeddedApache(DependencyModel dm) '''
		package startServer;
		import java.awt.Desktop;
		import java.net.URI;

		import org.apache.catalina.startup.Tomcat;

		public class StartEmbeddedApache {
			static private final String CONTEXT_PATH = "/survey";
			static private final String PROJECT_HOME = "webapp";
			static public final int PORT = 7576;
			private static Tomcat tomcat;

			public static void main(String[] args) throws Exception {
				tomcat = new Tomcat();
				tomcat.setPort(PORT);
		
				tomcat.setBaseDir(".");
				tomcat.addWebapp(CONTEXT_PATH, PROJECT_HOME);

				tomcat.start();
				Desktop.getDesktop().browse(new URI("http://localhost:" + PORT + CONTEXT_PATH));
				tomcat.getServer().await();
			}
		}
	'''
		
	// ------- SOLVE DEPENDENCIES--------------------------------------
	def dispatch Object solveDependencies(Dependency d) '''
		«switch (d) {
			And: {
				printAnd(d)
			}
			Or: {
				printOr(d)
			}
			Bracket : {
				printBracket(d)			
			}
			DMQuestion: {
				solveQuestion(d)
			}
			DMMatrixQuestion: {
				solveQuestion(d)			
			}
		}»
	'''
	
	def solveQuestion(DMQuestion question) '''
		(«question.question.id».equals("«question.answer.id»")) 
	'''
	
	def solveQuestion(DMMatrixQuestion question) '''
		(«question.question.id».equals("«question.answer.id»")) 
	'''
	
	def solveMatrixQuestion(DMMatrixQuestion q) '''
		(«q.matrixQuestion.id».equals("«q.matrixScale.id»"))
	'''
	
	def printAnd(And and) '''
		«(and.left.solveDependencies as StringConcatenation)» && «(and.right.solveDependencies as StringConcatenation)»
	'''
	
	def printOr(Or or) '''
		«(or.left.solveDependencies as StringConcatenation)» || «(or.right.solveDependencies as StringConcatenation)»
	'''
	
	def printBracket(Bracket bracket) '''
		(«(bracket.dependency.solveDependencies as StringConcatenation)»)
	'''
	
	def generalServletHead() '''
		package servlets;
		import java.io.IOException;
		import java.util.HashMap;
		import java.util.Map;

		import javax.servlet.ServletException;
		import javax.servlet.http.HttpServlet;
		import javax.servlet.http.HttpServletRequest;
		import javax.servlet.http.HttpServletResponse;
		
		import com.mongodb.BasicDBObject;
		import com.mongodb.DB;
		import com.mongodb.DBCollection;
		import com.mongodb.MongoClient;
	'''
}
	
