/*
* generated by Xtext
*/
package de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.nordakademie.mwi13a.team1.dependency.services.DependencyGrammarAccess;

public class DependencyParser extends AbstractContentAssistParser {
	
	@Inject
	private DependencyGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser createParser() {
		de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser result = new de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSDNextPartsAccess().getAlternatives_4_0(), "rule__SDNextParts__Alternatives_4_0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getSurveyDependencyAccess().getGroup(), "rule__SurveyDependency__Group__0");
					put(grammarAccess.getSDPartAccess().getGroup(), "rule__SDPart__Group__0");
					put(grammarAccess.getSDPartAccess().getGroup_5(), "rule__SDPart__Group_5__0");
					put(grammarAccess.getSDNextPartsAccess().getGroup(), "rule__SDNextParts__Group__0");
					put(grammarAccess.getSDNextPartsAccess().getGroup_4(), "rule__SDNextParts__Group_4__0");
					put(grammarAccess.getSDPartDependenciesAccess().getGroup(), "rule__SDPartDependencies__Group__0");
					put(grammarAccess.getSurveyDependenciesAccess().getSurveyDependencyAssignment(), "rule__SurveyDependencies__SurveyDependencyAssignment");
					put(grammarAccess.getSurveyDependencyAccess().getSurveyAssignment_1(), "rule__SurveyDependency__SurveyAssignment_1");
					put(grammarAccess.getSurveyDependencyAccess().getPartAssignment_3(), "rule__SurveyDependency__PartAssignment_3");
					put(grammarAccess.getSDPartAccess().getPart2Assignment_1(), "rule__SDPart__Part2Assignment_1");
					put(grammarAccess.getSDPartAccess().getDefaultNextPartAssignment_4(), "rule__SDPart__DefaultNextPartAssignment_4");
					put(grammarAccess.getSDPartAccess().getNextPartsAssignment_5_1(), "rule__SDPart__NextPartsAssignment_5_1");
					put(grammarAccess.getSDNextPartsAccess().getNextPartAssignment_1(), "rule__SDNextParts__NextPartAssignment_1");
					put(grammarAccess.getSDNextPartsAccess().getPartDependenciesAssignment_3(), "rule__SDNextParts__PartDependenciesAssignment_3");
					put(grammarAccess.getSDNextPartsAccess().getPartDependenciesAssignment_4_1(), "rule__SDNextParts__PartDependenciesAssignment_4_1");
					put(grammarAccess.getSDPartDependenciesAccess().getQuestionAssignment_1(), "rule__SDPartDependencies__QuestionAssignment_1");
					put(grammarAccess.getSDPartDependenciesAccess().getAnswerAssignment_3(), "rule__SDPartDependencies__AnswerAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser typedParser = (de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser) parser;
			typedParser.entryRuleSurveyDependencies();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DependencyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DependencyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
