/*
* generated by Xtext
*/
package de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.nordakademie.mwi13a.team1.dependency.services.DependencyGrammarAccess;

public class DependencyParser extends AbstractContentAssistParser {
	
	@Inject
	private DependencyGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser createParser() {
		de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser result = new de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPartOptionsAccess().getAlternatives(), "rule__PartOptions__Alternatives");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getIdentifierAccess().getAlternatives(), "rule__Identifier__Alternatives");
					put(grammarAccess.getSurveyElementsAccess().getGroup(), "rule__SurveyElements__Group__0");
					put(grammarAccess.getPartElementsAccess().getGroup(), "rule__PartElements__Group__0");
					put(grammarAccess.getPartOptionsAccess().getGroup_0(), "rule__PartOptions__Group_0__0");
					put(grammarAccess.getPartOptionsAccess().getGroup_1(), "rule__PartOptions__Group_1__0");
					put(grammarAccess.getDMNextPartsAccess().getGroup(), "rule__DMNextParts__Group__0");
					put(grammarAccess.getDMNextPartsAccess().getGroup_2(), "rule__DMNextParts__Group_2__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getDMMatrixQuestionAccess().getGroup(), "rule__DMMatrixQuestion__Group__0");
					put(grammarAccess.getDependencyModelAccess().getElementsAssignment(), "rule__DependencyModel__ElementsAssignment");
					put(grammarAccess.getSurveyElementsAccess().getNameAssignment_1(), "rule__SurveyElements__NameAssignment_1");
					put(grammarAccess.getSurveyElementsAccess().getPartElementsAssignment_3(), "rule__SurveyElements__PartElementsAssignment_3");
					put(grammarAccess.getPartElementsAccess().getNameAssignment_1(), "rule__PartElements__NameAssignment_1");
					put(grammarAccess.getPartElementsAccess().getOptionAssignment_2(), "rule__PartElements__OptionAssignment_2");
					put(grammarAccess.getPartOptionsAccess().getNextPartsAssignment_0_2(), "rule__PartOptions__NextPartsAssignment_0_2");
					put(grammarAccess.getPartOptionsAccess().getLastPartAssignment_1_1(), "rule__PartOptions__LastPartAssignment_1_1");
					put(grammarAccess.getDMNextPartsAccess().getNameAssignment_1(), "rule__DMNextParts__NameAssignment_1");
					put(grammarAccess.getDMNextPartsAccess().getExpressionsAssignment_2_2(), "rule__DMNextParts__ExpressionsAssignment_2_2");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getDependencyAssignment_0_2(), "rule__Primary__DependencyAssignment_0_2");
					put(grammarAccess.getAtomicAccess().getQuestionAssignment_0_2(), "rule__Atomic__QuestionAssignment_0_2");
					put(grammarAccess.getAtomicAccess().getAnswerAssignment_0_4(), "rule__Atomic__AnswerAssignment_0_4");
					put(grammarAccess.getAtomicAccess().getQuestionAssignment_1_2(), "rule__Atomic__QuestionAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getAnswerAssignment_1_4(), "rule__Atomic__AnswerAssignment_1_4");
					put(grammarAccess.getDMMatrixQuestionAccess().getMatrixQuestionAssignment_1(), "rule__DMMatrixQuestion__MatrixQuestionAssignment_1");
					put(grammarAccess.getDMMatrixQuestionAccess().getMatrixScaleAssignment_3(), "rule__DMMatrixQuestion__MatrixScaleAssignment_3");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser typedParser = (de.nordakademie.mwi13a.team1.dependency.ui.contentassist.antlr.internal.InternalDependencyParser) parser;
			typedParser.entryRuleDependencyModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public DependencyGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(DependencyGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
